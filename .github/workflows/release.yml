name: Build and release on pushes to releases branch

on:
  push:
    branches:
      - 'releases'

permissions:
  contents: write

jobs:
  build-and-release:
    name: Build and release on push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository (full history)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Read version
        id: read_version
        run: |
          set -euo pipefail

          if [ ! -f metadata/VERSION ]; then
            echo "ERROR: metadata/VERSION not found"
            exit 1
          fi

          VERSION=$(sed -n '1s/^[[:space:]]*//;s/[[:space:]]*$//p' metadata/VERSION)

          if [ -z "$VERSION" ]; then
            echo "ERROR: metadata/VERSION is empty"
            exit 1
          fi

          # Accept semantic numeric prefix with any trailing text (e.g. 0.1.0-alpha)
          if ! echo "$VERSION" | grep -Eq '^[0-9]+\.[0-9]+\.[0-9]+.*$'; then
            echo "WARNING: version '$VERSION' does not match <major>.<minor>.<patch> prefix pattern"
          fi

          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Version read: $VERSION"

      - name: Set changelog file path
        run: |
          set -euo pipefail
          if [ ! -f metadata/CHANGELOG.md ]; then
            echo "ERROR: metadata/CHANGELOG.md not found"
            exit 1
          fi
          echo "CHANGELOG_FILE=metadata/CHANGELOG.md" >> $GITHUB_ENV

      - name: Ensure version and changelog updated in this push
        run: |
          set -euo pipefail

          BEFORE="${{ github.event.before }}"
          HEAD="${{ github.sha }}"

          # If this is the branch's initial push, github.event.before will be all zeros.
          if [ "$BEFORE" = "0000000000000000000000000000000000000000" ]; then
            echo "Initial branch push detected (before is all zeros). Skipping metadata-change check."
            exit 0
          fi

          echo "Checking changed files between $BEFORE and $HEAD..."
          git --no-pager diff --name-only "$BEFORE" "$HEAD" > changed_files.txt || true
          cat changed_files.txt

          # require both files to be present in the changed file list
          if ! grep -qxF "metadata/VERSION" changed_files.txt; then
            echo "ERROR: metadata/VERSION was NOT changed in this push. Please update metadata/VERSION for the release."
            exit 1
          fi

          if ! grep -qxF "metadata/CHANGELOG.md" changed_files.txt; then
            echo "ERROR: metadata/CHANGELOG.md was NOT changed in this push. Please update metadata/CHANGELOG.md for the release."
            exit 1
          fi

          echo "OK: both metadata/VERSION and metadata/CHANGELOG.md were changed in this push."

      - name: Install dependencies
        run: sudo apt-get install -y libcurl4-openssl-dev libsqlite3-dev
      - name: Build binary
        run: |
          set -euo pipefail
          make clean && time make
      - name: Validate compiled binary
        id: validate_binary
        run: |
          set -euo pipefail
          BINARY_PATH="$PWD/build/edh"
          if [ ! -f "$BINARY_PATH" ]; then
            echo "ERROR: expected binary not found at $BINARY_PATH"
            echo "Makefile shuold place the binary at build/edh"
            exit 1
          fi
          if [ ! -s "$BINARY_PATH" ]; then
            echo "ERROR: binary at $BINARY_PATH is empty"
            exit 1
          fi
          echo "BINARY_PATH=$BINARY_PATH" >> $GITHUB_ENV
          ls -l "$BINARY_PATH"

      - name: Create release with binary
        env:
          GH_TOKEN: ${{ github.token }}
          VERSION: ${{ env.VERSION }}
          CHANGELOG_FILE: ${{ env.CHANGELOG_FILE }}
          BINARY_PATH: ${{ env.BINARY_PATH }}
        run: |
          set -euo pipefail
          tag="v${VERSION}"
          echo "Creating release with tag: $tag"

          gh release create "$tag" \
            "$BINARY_PATH" \
            --title "$VERSION" \
            --notes-file "$CHANGELOG_FILE" \
            --prerelease=false

          RELEASE_URL=$(gh release view "$tag" --json url -q .url)
          echo "Release created: $RELEASE_URL"
          echo "release_url=$RELEASE_URL" >> $GITHUB_OUTPUT

#  publish-to-aur:
#    name: Publish release to AUR
#    uses: ./.github/workflows/aur.yml
